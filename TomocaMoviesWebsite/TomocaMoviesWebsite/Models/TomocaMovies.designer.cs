#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TomocaMoviesWebsite.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbTomoca")]
	public partial class TomocaMoviesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActor(Actor instance);
    partial void UpdateActor(Actor instance);
    partial void DeleteActor(Actor instance);
    partial void InsertYoutubeReview(YoutubeReview instance);
    partial void UpdateYoutubeReview(YoutubeReview instance);
    partial void DeleteYoutubeReview(YoutubeReview instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertDirector(Director instance);
    partial void UpdateDirector(Director instance);
    partial void DeleteDirector(Director instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertLocateMovie(LocateMovie instance);
    partial void UpdateLocateMovie(LocateMovie instance);
    partial void DeleteLocateMovie(LocateMovie instance);
    partial void InsertMovieActor(MovieActor instance);
    partial void UpdateMovieActor(MovieActor instance);
    partial void DeleteMovieActor(MovieActor instance);
    partial void InsertMovieDirector(MovieDirector instance);
    partial void UpdateMovieDirector(MovieDirector instance);
    partial void DeleteMovieDirector(MovieDirector instance);
    partial void InsertMovy(Movy instance);
    partial void UpdateMovy(Movy instance);
    partial void DeleteMovy(Movy instance);
    partial void InsertMoviesGenre(MoviesGenre instance);
    partial void UpdateMoviesGenre(MoviesGenre instance);
    partial void DeleteMoviesGenre(MoviesGenre instance);
    partial void InsertMoviesVote(MoviesVote instance);
    partial void UpdateMoviesVote(MoviesVote instance);
    partial void DeleteMoviesVote(MoviesVote instance);
    partial void InsertMovieTheater(MovieTheater instance);
    partial void UpdateMovieTheater(MovieTheater instance);
    partial void DeleteMovieTheater(MovieTheater instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertReviewOfMovie(ReviewOfMovie instance);
    partial void UpdateReviewOfMovie(ReviewOfMovie instance);
    partial void DeleteReviewOfMovie(ReviewOfMovie instance);
    partial void InsertSetShowTime(SetShowTime instance);
    partial void UpdateSetShowTime(SetShowTime instance);
    partial void DeleteSetShowTime(SetShowTime instance);
    partial void InsertShowTime(ShowTime instance);
    partial void UpdateShowTime(ShowTime instance);
    partial void DeleteShowTime(ShowTime instance);
    partial void InsertShowTimeMovie(ShowTimeMovie instance);
    partial void UpdateShowTimeMovie(ShowTimeMovie instance);
    partial void DeleteShowTimeMovie(ShowTimeMovie instance);
    partial void InsertTheater(Theater instance);
    partial void UpdateTheater(Theater instance);
    partial void DeleteTheater(Theater instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertTicketType(TicketType instance);
    partial void UpdateTicketType(TicketType instance);
    partial void DeleteTicketType(TicketType instance);
    partial void InsertUserBook(UserBook instance);
    partial void UpdateUserBook(UserBook instance);
    partial void DeleteUserBook(UserBook instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public TomocaMoviesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TomocaMoviesConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TomocaMoviesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TomocaMoviesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TomocaMoviesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TomocaMoviesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Actor> Actors
		{
			get
			{
				return this.GetTable<Actor>();
			}
		}
		
		public System.Data.Linq.Table<YoutubeReview> YoutubeReviews
		{
			get
			{
				return this.GetTable<YoutubeReview>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<Director> Directors
		{
			get
			{
				return this.GetTable<Director>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<LocateMovie> LocateMovies
		{
			get
			{
				return this.GetTable<LocateMovie>();
			}
		}
		
		public System.Data.Linq.Table<MovieActor> MovieActors
		{
			get
			{
				return this.GetTable<MovieActor>();
			}
		}
		
		public System.Data.Linq.Table<MovieDirector> MovieDirectors
		{
			get
			{
				return this.GetTable<MovieDirector>();
			}
		}
		
		public System.Data.Linq.Table<Movy> Movies
		{
			get
			{
				return this.GetTable<Movy>();
			}
		}
		
		public System.Data.Linq.Table<MoviesGenre> MoviesGenres
		{
			get
			{
				return this.GetTable<MoviesGenre>();
			}
		}
		
		public System.Data.Linq.Table<MoviesVote> MoviesVotes
		{
			get
			{
				return this.GetTable<MoviesVote>();
			}
		}
		
		public System.Data.Linq.Table<MovieTheater> MovieTheaters
		{
			get
			{
				return this.GetTable<MovieTheater>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<ReviewOfMovie> ReviewOfMovies
		{
			get
			{
				return this.GetTable<ReviewOfMovie>();
			}
		}
		
		public System.Data.Linq.Table<SetShowTime> SetShowTimes
		{
			get
			{
				return this.GetTable<SetShowTime>();
			}
		}
		
		public System.Data.Linq.Table<ShowTime> ShowTimes
		{
			get
			{
				return this.GetTable<ShowTime>();
			}
		}
		
		public System.Data.Linq.Table<ShowTimeMovie> ShowTimeMovies
		{
			get
			{
				return this.GetTable<ShowTimeMovie>();
			}
		}
		
		public System.Data.Linq.Table<Theater> Theaters
		{
			get
			{
				return this.GetTable<Theater>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<TicketType> TicketTypes
		{
			get
			{
				return this.GetTable<TicketType>();
			}
		}
		
		public System.Data.Linq.Table<UserBook> UserBooks
		{
			get
			{
				return this.GetTable<UserBook>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Actors")]
	public partial class Actor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActorID;
		
		private string _Name;
		
		private string _Nationality;
		
		private System.Nullable<System.DateTime> _Birth;
		
		private EntitySet<MovieActor> _MovieActors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthChanged();
    #endregion
		
		public Actor()
		{
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth", DbType="Date")]
		public System.Nullable<System.DateTime> Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_MovieActor", Storage="_MovieActors", ThisKey="ActorID", OtherKey="ActorID")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Actor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.YoutubeReviews")]
	public partial class YoutubeReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _YoutubeID;
		
		private string _Author;
		
		private string _Image;
		
		private string _Video;
		
		private EntitySet<ReviewOfMovie> _ReviewOfMovies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnYoutubeIDChanging(int value);
    partial void OnYoutubeIDChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnVideoChanging(string value);
    partial void OnVideoChanged();
    #endregion
		
		public YoutubeReview()
		{
			this._ReviewOfMovies = new EntitySet<ReviewOfMovie>(new Action<ReviewOfMovie>(this.attach_ReviewOfMovies), new Action<ReviewOfMovie>(this.detach_ReviewOfMovies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YoutubeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int YoutubeID
		{
			get
			{
				return this._YoutubeID;
			}
			set
			{
				if ((this._YoutubeID != value))
				{
					this.OnYoutubeIDChanging(value);
					this.SendPropertyChanging();
					this._YoutubeID = value;
					this.SendPropertyChanged("YoutubeID");
					this.OnYoutubeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Author", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Author
		{
			get
			{
				return this._Author;
			}
			set
			{
				if ((this._Author != value))
				{
					this.OnAuthorChanging(value);
					this.SendPropertyChanging();
					this._Author = value;
					this.SendPropertyChanged("Author");
					this.OnAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Video", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Video
		{
			get
			{
				return this._Video;
			}
			set
			{
				if ((this._Video != value))
				{
					this.OnVideoChanging(value);
					this.SendPropertyChanging();
					this._Video = value;
					this.SendPropertyChanged("Video");
					this.OnVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YoutubeReview_ReviewOfMovie", Storage="_ReviewOfMovies", ThisKey="YoutubeID", OtherKey="YoutubeID")]
		public EntitySet<ReviewOfMovie> ReviewOfMovies
		{
			get
			{
				return this._ReviewOfMovies;
			}
			set
			{
				this._ReviewOfMovies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReviewOfMovies(ReviewOfMovie entity)
		{
			this.SendPropertyChanging();
			entity.YoutubeReview = this;
		}
		
		private void detach_ReviewOfMovies(ReviewOfMovie entity)
		{
			this.SendPropertyChanging();
			entity.YoutubeReview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _City1;
		
		private EntitySet<MovieTheater> _MovieTheaters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCity1Changing(string value);
    partial void OnCity1Changed();
    #endregion
		
		public City()
		{
			this._MovieTheaters = new EntitySet<MovieTheater>(new Action<MovieTheater>(this.attach_MovieTheaters), new Action<MovieTheater>(this.detach_MovieTheaters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="City", Storage="_City1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City1
		{
			get
			{
				return this._City1;
			}
			set
			{
				if ((this._City1 != value))
				{
					this.OnCity1Changing(value);
					this.SendPropertyChanging();
					this._City1 = value;
					this.SendPropertyChanged("City1");
					this.OnCity1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_MovieTheater", Storage="_MovieTheaters", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<MovieTheater> MovieTheaters
		{
			get
			{
				return this._MovieTheaters;
			}
			set
			{
				this._MovieTheaters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieTheaters(MovieTheater entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_MovieTheaters(MovieTheater entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private int _MovieID;
		
		private int _UserID;
		
		private string _Subject;
		
		private string _Status;
		
		private System.DateTime _CreateTime;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public Comment()
		{
			this._Movy = default(EntityRef<Movy>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Comment", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private string _Image1;
		
		private string _Content1;
		
		private string _Image2;
		
		private string _Content2;
		
		private string _Image3;
		
		private string _Content3;
		
		private string _Image4;
		
		private string _Content4;
		
		private string _Image5;
		
		private string _Content5;
		
		private EntityRef<New> _New;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnImage1Changing(string value);
    partial void OnImage1Changed();
    partial void OnContent1Changing(string value);
    partial void OnContent1Changed();
    partial void OnImage2Changing(string value);
    partial void OnImage2Changed();
    partial void OnContent2Changing(string value);
    partial void OnContent2Changed();
    partial void OnImage3Changing(string value);
    partial void OnImage3Changed();
    partial void OnContent3Changing(string value);
    partial void OnContent3Changed();
    partial void OnImage4Changing(string value);
    partial void OnImage4Changed();
    partial void OnContent4Changing(string value);
    partial void OnContent4Changed();
    partial void OnImage5Changing(string value);
    partial void OnImage5Changed();
    partial void OnContent5Changing(string value);
    partial void OnContent5Changed();
    #endregion
		
		public Content()
		{
			this._New = default(EntityRef<New>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image1", DbType="NVarChar(MAX)")]
		public string Image1
		{
			get
			{
				return this._Image1;
			}
			set
			{
				if ((this._Image1 != value))
				{
					this.OnImage1Changing(value);
					this.SendPropertyChanging();
					this._Image1 = value;
					this.SendPropertyChanged("Image1");
					this.OnImage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content1", DbType="NVarChar(MAX)")]
		public string Content1
		{
			get
			{
				return this._Content1;
			}
			set
			{
				if ((this._Content1 != value))
				{
					this.OnContent1Changing(value);
					this.SendPropertyChanging();
					this._Content1 = value;
					this.SendPropertyChanged("Content1");
					this.OnContent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image2", DbType="NVarChar(MAX)")]
		public string Image2
		{
			get
			{
				return this._Image2;
			}
			set
			{
				if ((this._Image2 != value))
				{
					this.OnImage2Changing(value);
					this.SendPropertyChanging();
					this._Image2 = value;
					this.SendPropertyChanged("Image2");
					this.OnImage2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content2", DbType="NVarChar(MAX)")]
		public string Content2
		{
			get
			{
				return this._Content2;
			}
			set
			{
				if ((this._Content2 != value))
				{
					this.OnContent2Changing(value);
					this.SendPropertyChanging();
					this._Content2 = value;
					this.SendPropertyChanged("Content2");
					this.OnContent2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image3", DbType="NVarChar(MAX)")]
		public string Image3
		{
			get
			{
				return this._Image3;
			}
			set
			{
				if ((this._Image3 != value))
				{
					this.OnImage3Changing(value);
					this.SendPropertyChanging();
					this._Image3 = value;
					this.SendPropertyChanged("Image3");
					this.OnImage3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content3", DbType="NVarChar(MAX)")]
		public string Content3
		{
			get
			{
				return this._Content3;
			}
			set
			{
				if ((this._Content3 != value))
				{
					this.OnContent3Changing(value);
					this.SendPropertyChanging();
					this._Content3 = value;
					this.SendPropertyChanged("Content3");
					this.OnContent3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image4", DbType="NVarChar(MAX)")]
		public string Image4
		{
			get
			{
				return this._Image4;
			}
			set
			{
				if ((this._Image4 != value))
				{
					this.OnImage4Changing(value);
					this.SendPropertyChanging();
					this._Image4 = value;
					this.SendPropertyChanged("Image4");
					this.OnImage4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content4", DbType="NVarChar(MAX)")]
		public string Content4
		{
			get
			{
				return this._Content4;
			}
			set
			{
				if ((this._Content4 != value))
				{
					this.OnContent4Changing(value);
					this.SendPropertyChanging();
					this._Content4 = value;
					this.SendPropertyChanged("Content4");
					this.OnContent4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image5", DbType="NVarChar(MAX)")]
		public string Image5
		{
			get
			{
				return this._Image5;
			}
			set
			{
				if ((this._Image5 != value))
				{
					this.OnImage5Changing(value);
					this.SendPropertyChanging();
					this._Image5 = value;
					this.SendPropertyChanged("Image5");
					this.OnImage5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content5", DbType="NVarChar(MAX)")]
		public string Content5
		{
			get
			{
				return this._Content5;
			}
			set
			{
				if ((this._Content5 != value))
				{
					this.OnContent5Changing(value);
					this.SendPropertyChanging();
					this._Content5 = value;
					this.SendPropertyChanged("Content5");
					this.OnContent5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_Content", Storage="_New", ThisKey="NewsID", OtherKey="NewsID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.Content = null;
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.Content = this;
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directors")]
	public partial class Director : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DirectorID;
		
		private string _Name;
		
		private string _Nationality;
		
		private System.Nullable<System.DateTime> _Birth;
		
		private EntitySet<MovieDirector> _MovieDirectors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirectorIDChanging(int value);
    partial void OnDirectorIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthChanged();
    #endregion
		
		public Director()
		{
			this._MovieDirectors = new EntitySet<MovieDirector>(new Action<MovieDirector>(this.attach_MovieDirectors), new Action<MovieDirector>(this.detach_MovieDirectors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DirectorID
		{
			get
			{
				return this._DirectorID;
			}
			set
			{
				if ((this._DirectorID != value))
				{
					this.OnDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._DirectorID = value;
					this.SendPropertyChanged("DirectorID");
					this.OnDirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth", DbType="Date")]
		public System.Nullable<System.DateTime> Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Director_MovieDirector", Storage="_MovieDirectors", ThisKey="DirectorID", OtherKey="DirectorID")]
		public EntitySet<MovieDirector> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Director = this;
		}
		
		private void detach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Director = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genres")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GenreID;
		
		private string _GenreName;
		
		private EntitySet<MoviesGenre> _MoviesGenres;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    partial void OnGenreNameChanging(string value);
    partial void OnGenreNameChanged();
    #endregion
		
		public Genre()
		{
			this._MoviesGenres = new EntitySet<MoviesGenre>(new Action<MoviesGenre>(this.attach_MoviesGenres), new Action<MoviesGenre>(this.detach_MoviesGenres));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string GenreName
		{
			get
			{
				return this._GenreName;
			}
			set
			{
				if ((this._GenreName != value))
				{
					this.OnGenreNameChanging(value);
					this.SendPropertyChanging();
					this._GenreName = value;
					this.SendPropertyChanged("GenreName");
					this.OnGenreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MoviesGenre", Storage="_MoviesGenres", ThisKey="GenreID", OtherKey="GenreID")]
		public EntitySet<MoviesGenre> MoviesGenres
		{
			get
			{
				return this._MoviesGenres;
			}
			set
			{
				this._MoviesGenres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MoviesGenres(MoviesGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = this;
		}
		
		private void detach_MoviesGenres(MoviesGenre entity)
		{
			this.SendPropertyChanging();
			entity.Genre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocateMovie")]
	public partial class LocateMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private string _Locate;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnLocateChanging(string value);
    partial void OnLocateChanged();
    #endregion
		
		public LocateMovie()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locate", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Locate
		{
			get
			{
				return this._Locate;
			}
			set
			{
				if ((this._Locate != value))
				{
					this.OnLocateChanging(value);
					this.SendPropertyChanging();
					this._Locate = value;
					this.SendPropertyChanged("Locate");
					this.OnLocateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocateMovie_Ticket", Storage="_Ticket", ThisKey="TicketID", OtherKey="TicketID", IsUnique=true, IsForeignKey=false)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.LocateMovie = null;
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.LocateMovie = this;
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieActor")]
	public partial class MovieActor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _ActorID;
		
		private EntityRef<Actor> _Actor;
		
		private EntityRef<Movy> _Movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnActorIDChanging(int value);
    partial void OnActorIDChanged();
    #endregion
		
		public MovieActor()
		{
			this._Actor = default(EntityRef<Actor>);
			this._Movy = default(EntityRef<Movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ActorID
		{
			get
			{
				return this._ActorID;
			}
			set
			{
				if ((this._ActorID != value))
				{
					if (this._Actor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActorIDChanging(value);
					this.SendPropertyChanging();
					this._ActorID = value;
					this.SendPropertyChanged("ActorID");
					this.OnActorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Actor_MovieActor", Storage="_Actor", ThisKey="ActorID", OtherKey="ActorID", IsForeignKey=true)]
		public Actor Actor
		{
			get
			{
				return this._Actor.Entity;
			}
			set
			{
				Actor previousValue = this._Actor.Entity;
				if (((previousValue != value) 
							|| (this._Actor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Actor.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Actor.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._ActorID = value.ActorID;
					}
					else
					{
						this._ActorID = default(int);
					}
					this.SendPropertyChanged("Actor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieActor", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MovieActors.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MovieActors.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieDirector")]
	public partial class MovieDirector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _DirectorID;
		
		private EntityRef<Director> _Director;
		
		private EntityRef<Movy> _Movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnDirectorIDChanging(int value);
    partial void OnDirectorIDChanged();
    #endregion
		
		public MovieDirector()
		{
			this._Director = default(EntityRef<Director>);
			this._Movy = default(EntityRef<Movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DirectorID
		{
			get
			{
				return this._DirectorID;
			}
			set
			{
				if ((this._DirectorID != value))
				{
					if (this._Director.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDirectorIDChanging(value);
					this.SendPropertyChanging();
					this._DirectorID = value;
					this.SendPropertyChanged("DirectorID");
					this.OnDirectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Director_MovieDirector", Storage="_Director", ThisKey="DirectorID", OtherKey="DirectorID", IsForeignKey=true)]
		public Director Director
		{
			get
			{
				return this._Director.Entity;
			}
			set
			{
				Director previousValue = this._Director.Entity;
				if (((previousValue != value) 
							|| (this._Director.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Director.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._Director.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._DirectorID = value.DirectorID;
					}
					else
					{
						this._DirectorID = default(int);
					}
					this.SendPropertyChanged("Director");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieDirector", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MovieDirectors.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MovieDirectors.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movies")]
	public partial class Movy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private string _Title;
		
		private string _Plot;
		
		private System.Nullable<int> _ReleaseYear;
		
		private System.Nullable<double> _IMDb;
		
		private string _Tomatometer;
		
		private string _AudienceScore;
		
		private string _Image;
		
		private string _Trailer;
		
		private System.Nullable<System.TimeSpan> _TimeOfFilm;
		
		private string _Banner;
		
		private System.Nullable<bool> _UpComming;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MovieActor> _MovieActors;
		
		private EntitySet<MovieDirector> _MovieDirectors;
		
		private EntitySet<MoviesGenre> _MoviesGenres;
		
		private EntitySet<MoviesVote> _MoviesVotes;
		
		private EntitySet<ReviewOfMovie> _ReviewOfMovies;
		
		private EntitySet<ShowTimeMovie> _ShowTimeMovies;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPlotChanging(string value);
    partial void OnPlotChanged();
    partial void OnReleaseYearChanging(System.Nullable<int> value);
    partial void OnReleaseYearChanged();
    partial void OnIMDbChanging(System.Nullable<double> value);
    partial void OnIMDbChanged();
    partial void OnTomatometerChanging(string value);
    partial void OnTomatometerChanged();
    partial void OnAudienceScoreChanging(string value);
    partial void OnAudienceScoreChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnTrailerChanging(string value);
    partial void OnTrailerChanged();
    partial void OnTimeOfFilmChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeOfFilmChanged();
    partial void OnBannerChanging(string value);
    partial void OnBannerChanged();
    partial void OnUpCommingChanging(System.Nullable<bool> value);
    partial void OnUpCommingChanged();
    #endregion
		
		public Movy()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MovieActors = new EntitySet<MovieActor>(new Action<MovieActor>(this.attach_MovieActors), new Action<MovieActor>(this.detach_MovieActors));
			this._MovieDirectors = new EntitySet<MovieDirector>(new Action<MovieDirector>(this.attach_MovieDirectors), new Action<MovieDirector>(this.detach_MovieDirectors));
			this._MoviesGenres = new EntitySet<MoviesGenre>(new Action<MoviesGenre>(this.attach_MoviesGenres), new Action<MoviesGenre>(this.detach_MoviesGenres));
			this._MoviesVotes = new EntitySet<MoviesVote>(new Action<MoviesVote>(this.attach_MoviesVotes), new Action<MoviesVote>(this.detach_MoviesVotes));
			this._ReviewOfMovies = new EntitySet<ReviewOfMovie>(new Action<ReviewOfMovie>(this.attach_ReviewOfMovies), new Action<ReviewOfMovie>(this.detach_ReviewOfMovies));
			this._ShowTimeMovies = new EntitySet<ShowTimeMovie>(new Action<ShowTimeMovie>(this.attach_ShowTimeMovies), new Action<ShowTimeMovie>(this.detach_ShowTimeMovies));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plot", DbType="VarChar(MAX)")]
		public string Plot
		{
			get
			{
				return this._Plot;
			}
			set
			{
				if ((this._Plot != value))
				{
					this.OnPlotChanging(value);
					this.SendPropertyChanging();
					this._Plot = value;
					this.SendPropertyChanged("Plot");
					this.OnPlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseYear", DbType="Int")]
		public System.Nullable<int> ReleaseYear
		{
			get
			{
				return this._ReleaseYear;
			}
			set
			{
				if ((this._ReleaseYear != value))
				{
					this.OnReleaseYearChanging(value);
					this.SendPropertyChanging();
					this._ReleaseYear = value;
					this.SendPropertyChanged("ReleaseYear");
					this.OnReleaseYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMDb", DbType="Float")]
		public System.Nullable<double> IMDb
		{
			get
			{
				return this._IMDb;
			}
			set
			{
				if ((this._IMDb != value))
				{
					this.OnIMDbChanging(value);
					this.SendPropertyChanging();
					this._IMDb = value;
					this.SendPropertyChanged("IMDb");
					this.OnIMDbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tomatometer", DbType="VarChar(10)")]
		public string Tomatometer
		{
			get
			{
				return this._Tomatometer;
			}
			set
			{
				if ((this._Tomatometer != value))
				{
					this.OnTomatometerChanging(value);
					this.SendPropertyChanging();
					this._Tomatometer = value;
					this.SendPropertyChanged("Tomatometer");
					this.OnTomatometerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudienceScore", DbType="VarChar(10)")]
		public string AudienceScore
		{
			get
			{
				return this._AudienceScore;
			}
			set
			{
				if ((this._AudienceScore != value))
				{
					this.OnAudienceScoreChanging(value);
					this.SendPropertyChanging();
					this._AudienceScore = value;
					this.SendPropertyChanged("AudienceScore");
					this.OnAudienceScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(MAX)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trailer", DbType="VarChar(MAX)")]
		public string Trailer
		{
			get
			{
				return this._Trailer;
			}
			set
			{
				if ((this._Trailer != value))
				{
					this.OnTrailerChanging(value);
					this.SendPropertyChanging();
					this._Trailer = value;
					this.SendPropertyChanged("Trailer");
					this.OnTrailerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeOfFilm", DbType="Time")]
		public System.Nullable<System.TimeSpan> TimeOfFilm
		{
			get
			{
				return this._TimeOfFilm;
			}
			set
			{
				if ((this._TimeOfFilm != value))
				{
					this.OnTimeOfFilmChanging(value);
					this.SendPropertyChanging();
					this._TimeOfFilm = value;
					this.SendPropertyChanged("TimeOfFilm");
					this.OnTimeOfFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banner", DbType="NVarChar(MAX)")]
		public string Banner
		{
			get
			{
				return this._Banner;
			}
			set
			{
				if ((this._Banner != value))
				{
					this.OnBannerChanging(value);
					this.SendPropertyChanging();
					this._Banner = value;
					this.SendPropertyChanged("Banner");
					this.OnBannerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpComming", DbType="Bit")]
		public System.Nullable<bool> UpComming
		{
			get
			{
				return this._UpComming;
			}
			set
			{
				if ((this._UpComming != value))
				{
					this.OnUpCommingChanging(value);
					this.SendPropertyChanging();
					this._UpComming = value;
					this.SendPropertyChanged("UpComming");
					this.OnUpCommingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Comment", Storage="_Comments", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieActor", Storage="_MovieActors", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MovieActor> MovieActors
		{
			get
			{
				return this._MovieActors;
			}
			set
			{
				this._MovieActors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MovieDirector", Storage="_MovieDirectors", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MovieDirector> MovieDirectors
		{
			get
			{
				return this._MovieDirectors;
			}
			set
			{
				this._MovieDirectors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviesGenre", Storage="_MoviesGenres", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MoviesGenre> MoviesGenres
		{
			get
			{
				return this._MoviesGenres;
			}
			set
			{
				this._MoviesGenres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviesVote", Storage="_MoviesVotes", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<MoviesVote> MoviesVotes
		{
			get
			{
				return this._MoviesVotes;
			}
			set
			{
				this._MoviesVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_ReviewOfMovie", Storage="_ReviewOfMovies", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<ReviewOfMovie> ReviewOfMovies
		{
			get
			{
				return this._ReviewOfMovies;
			}
			set
			{
				this._ReviewOfMovies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_ShowTimeMovie", Storage="_ShowTimeMovies", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<ShowTimeMovie> ShowTimeMovies
		{
			get
			{
				return this._ShowTimeMovies;
			}
			set
			{
				this._ShowTimeMovies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Ticket", Storage="_Tickets", ThisKey="MovieID", OtherKey="MovieID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MovieActors(MovieActor entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MovieDirectors(MovieDirector entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_MoviesGenres(MoviesGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MoviesGenres(MoviesGenre entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_MoviesVotes(MoviesVote entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_MoviesVotes(MoviesVote entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_ReviewOfMovies(ReviewOfMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_ReviewOfMovies(ReviewOfMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_ShowTimeMovies(ShowTimeMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_ShowTimeMovies(ShowTimeMovie entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Movy = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Movy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoviesGenres")]
	public partial class MoviesGenre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _GenreID;
		
		private EntityRef<Genre> _Genre;
		
		private EntityRef<Movy> _Movy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnGenreIDChanging(int value);
    partial void OnGenreIDChanged();
    #endregion
		
		public MoviesGenre()
		{
			this._Genre = default(EntityRef<Genre>);
			this._Movy = default(EntityRef<Movy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GenreID
		{
			get
			{
				return this._GenreID;
			}
			set
			{
				if ((this._GenreID != value))
				{
					if (this._Genre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreIDChanging(value);
					this.SendPropertyChanging();
					this._GenreID = value;
					this.SendPropertyChanged("GenreID");
					this.OnGenreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_MoviesGenre", Storage="_Genre", ThisKey="GenreID", OtherKey="GenreID", IsForeignKey=true)]
		public Genre Genre
		{
			get
			{
				return this._Genre.Entity;
			}
			set
			{
				Genre previousValue = this._Genre.Entity;
				if (((previousValue != value) 
							|| (this._Genre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre.Entity = null;
						previousValue.MoviesGenres.Remove(this);
					}
					this._Genre.Entity = value;
					if ((value != null))
					{
						value.MoviesGenres.Add(this);
						this._GenreID = value.GenreID;
					}
					else
					{
						this._GenreID = default(int);
					}
					this.SendPropertyChanged("Genre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviesGenre", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MoviesGenres.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MoviesGenres.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MoviesVote")]
	public partial class MoviesVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _MovieID;
		
		private bool _Action;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnActionChanging(bool value);
    partial void OnActionChanged();
    #endregion
		
		public MoviesVote()
		{
			this._Movy = default(EntityRef<Movy>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Bit NOT NULL")]
		public bool Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_MoviesVote", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.MoviesVotes.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.MoviesVotes.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoviesVote", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MoviesVotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MoviesVotes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MovieTheater")]
	public partial class MovieTheater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TheaterID;
		
		private string _TheaterName;
		
		private int _CityID;
		
		private System.Nullable<int> _Type;
		
		private string _Address;
		
		private EntitySet<ShowTimeMovie> _ShowTimeMovies;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntityRef<City> _City;
		
		private EntityRef<Theater> _Theater;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTheaterIDChanging(int value);
    partial void OnTheaterIDChanged();
    partial void OnTheaterNameChanging(string value);
    partial void OnTheaterNameChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public MovieTheater()
		{
			this._ShowTimeMovies = new EntitySet<ShowTimeMovie>(new Action<ShowTimeMovie>(this.attach_ShowTimeMovies), new Action<ShowTimeMovie>(this.detach_ShowTimeMovies));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._City = default(EntityRef<City>);
			this._Theater = default(EntityRef<Theater>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheaterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TheaterID
		{
			get
			{
				return this._TheaterID;
			}
			set
			{
				if ((this._TheaterID != value))
				{
					this.OnTheaterIDChanging(value);
					this.SendPropertyChanging();
					this._TheaterID = value;
					this.SendPropertyChanged("TheaterID");
					this.OnTheaterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheaterName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TheaterName
		{
			get
			{
				return this._TheaterName;
			}
			set
			{
				if ((this._TheaterName != value))
				{
					this.OnTheaterNameChanging(value);
					this.SendPropertyChanging();
					this._TheaterName = value;
					this.SendPropertyChanged("TheaterName");
					this.OnTheaterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._Theater.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieTheater_ShowTimeMovie", Storage="_ShowTimeMovies", ThisKey="TheaterID", OtherKey="TheaterID")]
		public EntitySet<ShowTimeMovie> ShowTimeMovies
		{
			get
			{
				return this._ShowTimeMovies;
			}
			set
			{
				this._ShowTimeMovies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieTheater_Ticket", Storage="_Tickets", ThisKey="TheaterID", OtherKey="TheaterID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_MovieTheater", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.MovieTheaters.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.MovieTheaters.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_MovieTheater", Storage="_Theater", ThisKey="Type", OtherKey="TheaterID", IsForeignKey=true)]
		public Theater Theater
		{
			get
			{
				return this._Theater.Entity;
			}
			set
			{
				Theater previousValue = this._Theater.Entity;
				if (((previousValue != value) 
							|| (this._Theater.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Theater.Entity = null;
						previousValue.MovieTheaters.Remove(this);
					}
					this._Theater.Entity = value;
					if ((value != null))
					{
						value.MovieTheaters.Add(this);
						this._Type = value.TheaterID;
					}
					else
					{
						this._Type = default(Nullable<int>);
					}
					this.SendPropertyChanged("Theater");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShowTimeMovies(ShowTimeMovie entity)
		{
			this.SendPropertyChanging();
			entity.MovieTheater = this;
		}
		
		private void detach_ShowTimeMovies(ShowTimeMovie entity)
		{
			this.SendPropertyChanging();
			entity.MovieTheater = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.MovieTheater = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.MovieTheater = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private int _UserID;
		
		private string _Title;
		
		private System.DateTime _CreateTime;
		
		private string _Photo;
		
		private decimal _ReadCount;
		
		private EntityRef<Content> _Content;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnReadCountChanging(decimal value);
    partial void OnReadCountChanged();
    #endregion
		
		public New()
		{
			this._Content = default(EntityRef<Content>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="NVarChar(MAX)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadCount", DbType="Money NOT NULL")]
		public decimal ReadCount
		{
			get
			{
				return this._ReadCount;
			}
			set
			{
				if ((this._ReadCount != value))
				{
					this.OnReadCountChanging(value);
					this.SendPropertyChanging();
					this._ReadCount = value;
					this.SendPropertyChanged("ReadCount");
					this.OnReadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_Content", Storage="_Content", ThisKey="NewsID", OtherKey="NewsID", IsUnique=true, IsForeignKey=false)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.New = null;
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.New = this;
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.News.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReviewOfMovie")]
	public partial class ReviewOfMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovieID;
		
		private int _YoutubeID;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<YoutubeReview> _YoutubeReview;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnYoutubeIDChanging(int value);
    partial void OnYoutubeIDChanged();
    #endregion
		
		public ReviewOfMovie()
		{
			this._Movy = default(EntityRef<Movy>);
			this._YoutubeReview = default(EntityRef<YoutubeReview>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YoutubeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int YoutubeID
		{
			get
			{
				return this._YoutubeID;
			}
			set
			{
				if ((this._YoutubeID != value))
				{
					if (this._YoutubeReview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYoutubeIDChanging(value);
					this.SendPropertyChanging();
					this._YoutubeID = value;
					this.SendPropertyChanged("YoutubeID");
					this.OnYoutubeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_ReviewOfMovie", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.ReviewOfMovies.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.ReviewOfMovies.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="YoutubeReview_ReviewOfMovie", Storage="_YoutubeReview", ThisKey="YoutubeID", OtherKey="YoutubeID", IsForeignKey=true)]
		public YoutubeReview YoutubeReview
		{
			get
			{
				return this._YoutubeReview.Entity;
			}
			set
			{
				YoutubeReview previousValue = this._YoutubeReview.Entity;
				if (((previousValue != value) 
							|| (this._YoutubeReview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._YoutubeReview.Entity = null;
						previousValue.ReviewOfMovies.Remove(this);
					}
					this._YoutubeReview.Entity = value;
					if ((value != null))
					{
						value.ReviewOfMovies.Add(this);
						this._YoutubeID = value.YoutubeID;
					}
					else
					{
						this._YoutubeID = default(int);
					}
					this.SendPropertyChanged("YoutubeReview");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SetShowTime")]
	public partial class SetShowTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TimeID;
		
		private EntityRef<ShowTime> _ShowTime;
		
		private EntityRef<ShowTimeMovie> _ShowTimeMovie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTimeIDChanging(int value);
    partial void OnTimeIDChanged();
    #endregion
		
		public SetShowTime()
		{
			this._ShowTime = default(EntityRef<ShowTime>);
			this._ShowTimeMovie = default(EntityRef<ShowTimeMovie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ShowTimeMovie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TimeID
		{
			get
			{
				return this._TimeID;
			}
			set
			{
				if ((this._TimeID != value))
				{
					if (this._ShowTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeIDChanging(value);
					this.SendPropertyChanging();
					this._TimeID = value;
					this.SendPropertyChanged("TimeID");
					this.OnTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTime_SetShowTime", Storage="_ShowTime", ThisKey="TimeID", OtherKey="TimeID", IsForeignKey=true)]
		public ShowTime ShowTime
		{
			get
			{
				return this._ShowTime.Entity;
			}
			set
			{
				ShowTime previousValue = this._ShowTime.Entity;
				if (((previousValue != value) 
							|| (this._ShowTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShowTime.Entity = null;
						previousValue.SetShowTimes.Remove(this);
					}
					this._ShowTime.Entity = value;
					if ((value != null))
					{
						value.SetShowTimes.Add(this);
						this._TimeID = value.TimeID;
					}
					else
					{
						this._TimeID = default(int);
					}
					this.SendPropertyChanged("ShowTime");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTimeMovie_SetShowTime", Storage="_ShowTimeMovie", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public ShowTimeMovie ShowTimeMovie
		{
			get
			{
				return this._ShowTimeMovie.Entity;
			}
			set
			{
				ShowTimeMovie previousValue = this._ShowTimeMovie.Entity;
				if (((previousValue != value) 
							|| (this._ShowTimeMovie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShowTimeMovie.Entity = null;
						previousValue.SetShowTimes.Remove(this);
					}
					this._ShowTimeMovie.Entity = value;
					if ((value != null))
					{
						value.SetShowTimes.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("ShowTimeMovie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShowTime")]
	public partial class ShowTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeID;
		
		private System.DateTime _Time;
		
		private EntitySet<SetShowTime> _SetShowTimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeIDChanging(int value);
    partial void OnTimeIDChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public ShowTime()
		{
			this._SetShowTimes = new EntitySet<SetShowTime>(new Action<SetShowTime>(this.attach_SetShowTimes), new Action<SetShowTime>(this.detach_SetShowTimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeID
		{
			get
			{
				return this._TimeID;
			}
			set
			{
				if ((this._TimeID != value))
				{
					this.OnTimeIDChanging(value);
					this.SendPropertyChanging();
					this._TimeID = value;
					this.SendPropertyChanged("TimeID");
					this.OnTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTime_SetShowTime", Storage="_SetShowTimes", ThisKey="TimeID", OtherKey="TimeID")]
		public EntitySet<SetShowTime> SetShowTimes
		{
			get
			{
				return this._SetShowTimes;
			}
			set
			{
				this._SetShowTimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SetShowTimes(SetShowTime entity)
		{
			this.SendPropertyChanging();
			entity.ShowTime = this;
		}
		
		private void detach_SetShowTimes(SetShowTime entity)
		{
			this.SendPropertyChanging();
			entity.ShowTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShowTimeMovie")]
	public partial class ShowTimeMovie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MovieID;
		
		private int _TheaterID;
		
		private EntitySet<SetShowTime> _SetShowTimes;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<MovieTheater> _MovieTheater;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTheaterIDChanging(int value);
    partial void OnTheaterIDChanged();
    #endregion
		
		public ShowTimeMovie()
		{
			this._SetShowTimes = new EntitySet<SetShowTime>(new Action<SetShowTime>(this.attach_SetShowTimes), new Action<SetShowTime>(this.detach_SetShowTimes));
			this._Movy = default(EntityRef<Movy>);
			this._MovieTheater = default(EntityRef<MovieTheater>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheaterID", DbType="Int NOT NULL")]
		public int TheaterID
		{
			get
			{
				return this._TheaterID;
			}
			set
			{
				if ((this._TheaterID != value))
				{
					if (this._MovieTheater.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTheaterIDChanging(value);
					this.SendPropertyChanging();
					this._TheaterID = value;
					this.SendPropertyChanged("TheaterID");
					this.OnTheaterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShowTimeMovie_SetShowTime", Storage="_SetShowTimes", ThisKey="ID", OtherKey="ID")]
		public EntitySet<SetShowTime> SetShowTimes
		{
			get
			{
				return this._SetShowTimes;
			}
			set
			{
				this._SetShowTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_ShowTimeMovie", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.ShowTimeMovies.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.ShowTimeMovies.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieTheater_ShowTimeMovie", Storage="_MovieTheater", ThisKey="TheaterID", OtherKey="TheaterID", IsForeignKey=true)]
		public MovieTheater MovieTheater
		{
			get
			{
				return this._MovieTheater.Entity;
			}
			set
			{
				MovieTheater previousValue = this._MovieTheater.Entity;
				if (((previousValue != value) 
							|| (this._MovieTheater.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieTheater.Entity = null;
						previousValue.ShowTimeMovies.Remove(this);
					}
					this._MovieTheater.Entity = value;
					if ((value != null))
					{
						value.ShowTimeMovies.Add(this);
						this._TheaterID = value.TheaterID;
					}
					else
					{
						this._TheaterID = default(int);
					}
					this.SendPropertyChanged("MovieTheater");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SetShowTimes(SetShowTime entity)
		{
			this.SendPropertyChanging();
			entity.ShowTimeMovie = this;
		}
		
		private void detach_SetShowTimes(SetShowTime entity)
		{
			this.SendPropertyChanging();
			entity.ShowTimeMovie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Theater")]
	public partial class Theater : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TheaterID;
		
		private string _Theater1;
		
		private string _Logo;
		
		private EntitySet<MovieTheater> _MovieTheaters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTheaterIDChanging(int value);
    partial void OnTheaterIDChanged();
    partial void OnTheater1Changing(string value);
    partial void OnTheater1Changed();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    #endregion
		
		public Theater()
		{
			this._MovieTheaters = new EntitySet<MovieTheater>(new Action<MovieTheater>(this.attach_MovieTheaters), new Action<MovieTheater>(this.detach_MovieTheaters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheaterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TheaterID
		{
			get
			{
				return this._TheaterID;
			}
			set
			{
				if ((this._TheaterID != value))
				{
					this.OnTheaterIDChanging(value);
					this.SendPropertyChanging();
					this._TheaterID = value;
					this.SendPropertyChanged("TheaterID");
					this.OnTheaterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Theater", Storage="_Theater1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Theater1
		{
			get
			{
				return this._Theater1;
			}
			set
			{
				if ((this._Theater1 != value))
				{
					this.OnTheater1Changing(value);
					this.SendPropertyChanging();
					this._Theater1 = value;
					this.SendPropertyChanged("Theater1");
					this.OnTheater1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(MAX)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Theater_MovieTheater", Storage="_MovieTheaters", ThisKey="TheaterID", OtherKey="Type")]
		public EntitySet<MovieTheater> MovieTheaters
		{
			get
			{
				return this._MovieTheaters;
			}
			set
			{
				this._MovieTheaters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MovieTheaters(MovieTheater entity)
		{
			this.SendPropertyChanging();
			entity.Theater = this;
		}
		
		private void detach_MovieTheaters(MovieTheater entity)
		{
			this.SendPropertyChanging();
			entity.Theater = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private int _TicketNumber;
		
		private int _TicketAvailable;
		
		private int _MovieID;
		
		private int _TheaterID;
		
		private int _Money;
		
		private EntitySet<UserBook> _UserBooks;
		
		private EntityRef<LocateMovie> _LocateMovie;
		
		private EntityRef<Movy> _Movy;
		
		private EntityRef<MovieTheater> _MovieTheater;
		
		private EntityRef<TicketType> _TicketType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnTicketNumberChanging(int value);
    partial void OnTicketNumberChanged();
    partial void OnTicketAvailableChanging(int value);
    partial void OnTicketAvailableChanged();
    partial void OnMovieIDChanging(int value);
    partial void OnMovieIDChanged();
    partial void OnTheaterIDChanging(int value);
    partial void OnTheaterIDChanged();
    partial void OnMoneyChanging(int value);
    partial void OnMoneyChanged();
    #endregion
		
		public Ticket()
		{
			this._UserBooks = new EntitySet<UserBook>(new Action<UserBook>(this.attach_UserBooks), new Action<UserBook>(this.detach_UserBooks));
			this._LocateMovie = default(EntityRef<LocateMovie>);
			this._Movy = default(EntityRef<Movy>);
			this._MovieTheater = default(EntityRef<MovieTheater>);
			this._TicketType = default(EntityRef<TicketType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if ((this._LocateMovie.HasLoadedOrAssignedValue || this._TicketType.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketNumber", DbType="Int NOT NULL")]
		public int TicketNumber
		{
			get
			{
				return this._TicketNumber;
			}
			set
			{
				if ((this._TicketNumber != value))
				{
					this.OnTicketNumberChanging(value);
					this.SendPropertyChanging();
					this._TicketNumber = value;
					this.SendPropertyChanged("TicketNumber");
					this.OnTicketNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketAvailable", DbType="Int NOT NULL")]
		public int TicketAvailable
		{
			get
			{
				return this._TicketAvailable;
			}
			set
			{
				if ((this._TicketAvailable != value))
				{
					this.OnTicketAvailableChanging(value);
					this.SendPropertyChanging();
					this._TicketAvailable = value;
					this.SendPropertyChanged("TicketAvailable");
					this.OnTicketAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovieID", DbType="Int NOT NULL")]
		public int MovieID
		{
			get
			{
				return this._MovieID;
			}
			set
			{
				if ((this._MovieID != value))
				{
					if (this._Movy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMovieIDChanging(value);
					this.SendPropertyChanging();
					this._MovieID = value;
					this.SendPropertyChanged("MovieID");
					this.OnMovieIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TheaterID", DbType="Int NOT NULL")]
		public int TheaterID
		{
			get
			{
				return this._TheaterID;
			}
			set
			{
				if ((this._TheaterID != value))
				{
					if (this._MovieTheater.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTheaterIDChanging(value);
					this.SendPropertyChanging();
					this._TheaterID = value;
					this.SendPropertyChanged("TheaterID");
					this.OnTheaterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Money", DbType="Int NOT NULL")]
		public int Money
		{
			get
			{
				return this._Money;
			}
			set
			{
				if ((this._Money != value))
				{
					this.OnMoneyChanging(value);
					this.SendPropertyChanging();
					this._Money = value;
					this.SendPropertyChanged("Money");
					this.OnMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_UserBook", Storage="_UserBooks", ThisKey="TicketID", OtherKey="TicketID")]
		public EntitySet<UserBook> UserBooks
		{
			get
			{
				return this._UserBooks;
			}
			set
			{
				this._UserBooks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocateMovie_Ticket", Storage="_LocateMovie", ThisKey="TicketID", OtherKey="TicketID", IsForeignKey=true)]
		public LocateMovie LocateMovie
		{
			get
			{
				return this._LocateMovie.Entity;
			}
			set
			{
				LocateMovie previousValue = this._LocateMovie.Entity;
				if (((previousValue != value) 
							|| (this._LocateMovie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocateMovie.Entity = null;
						previousValue.Ticket = null;
					}
					this._LocateMovie.Entity = value;
					if ((value != null))
					{
						value.Ticket = this;
						this._TicketID = value.TicketID;
					}
					else
					{
						this._TicketID = default(int);
					}
					this.SendPropertyChanged("LocateMovie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Movy_Ticket", Storage="_Movy", ThisKey="MovieID", OtherKey="MovieID", IsForeignKey=true)]
		public Movy Movy
		{
			get
			{
				return this._Movy.Entity;
			}
			set
			{
				Movy previousValue = this._Movy.Entity;
				if (((previousValue != value) 
							|| (this._Movy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Movy.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Movy.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._MovieID = value.MovieID;
					}
					else
					{
						this._MovieID = default(int);
					}
					this.SendPropertyChanged("Movy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MovieTheater_Ticket", Storage="_MovieTheater", ThisKey="TheaterID", OtherKey="TheaterID", IsForeignKey=true)]
		public MovieTheater MovieTheater
		{
			get
			{
				return this._MovieTheater.Entity;
			}
			set
			{
				MovieTheater previousValue = this._MovieTheater.Entity;
				if (((previousValue != value) 
							|| (this._MovieTheater.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MovieTheater.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._MovieTheater.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._TheaterID = value.TheaterID;
					}
					else
					{
						this._TheaterID = default(int);
					}
					this.SendPropertyChanged("MovieTheater");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Ticket", Storage="_TicketType", ThisKey="TicketID", OtherKey="TicketID", IsForeignKey=true)]
		public TicketType TicketType
		{
			get
			{
				return this._TicketType.Entity;
			}
			set
			{
				TicketType previousValue = this._TicketType.Entity;
				if (((previousValue != value) 
							|| (this._TicketType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TicketType.Entity = null;
						previousValue.Ticket = null;
					}
					this._TicketType.Entity = value;
					if ((value != null))
					{
						value.Ticket = this;
						this._TicketID = value.TicketID;
					}
					else
					{
						this._TicketID = default(int);
					}
					this.SendPropertyChanged("TicketType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBooks(UserBook entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_UserBooks(UserBook entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketType")]
	public partial class TicketType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private int _VIP;
		
		private int _Adult;
		
		private int _Student;
		
		private int _Child;
		
		private int _Total;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnVIPChanging(int value);
    partial void OnVIPChanged();
    partial void OnAdultChanging(int value);
    partial void OnAdultChanged();
    partial void OnStudentChanging(int value);
    partial void OnStudentChanged();
    partial void OnChildChanging(int value);
    partial void OnChildChanged();
    partial void OnTotalChanging(int value);
    partial void OnTotalChanged();
    #endregion
		
		public TicketType()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIP", DbType="Int NOT NULL")]
		public int VIP
		{
			get
			{
				return this._VIP;
			}
			set
			{
				if ((this._VIP != value))
				{
					this.OnVIPChanging(value);
					this.SendPropertyChanging();
					this._VIP = value;
					this.SendPropertyChanged("VIP");
					this.OnVIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Adult", DbType="Int NOT NULL")]
		public int Adult
		{
			get
			{
				return this._Adult;
			}
			set
			{
				if ((this._Adult != value))
				{
					this.OnAdultChanging(value);
					this.SendPropertyChanging();
					this._Adult = value;
					this.SendPropertyChanged("Adult");
					this.OnAdultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student", DbType="Int NOT NULL")]
		public int Student
		{
			get
			{
				return this._Student;
			}
			set
			{
				if ((this._Student != value))
				{
					this.OnStudentChanging(value);
					this.SendPropertyChanging();
					this._Student = value;
					this.SendPropertyChanged("Student");
					this.OnStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child", DbType="Int NOT NULL")]
		public int Child
		{
			get
			{
				return this._Child;
			}
			set
			{
				if ((this._Child != value))
				{
					this.OnChildChanging(value);
					this.SendPropertyChanging();
					this._Child = value;
					this.SendPropertyChanged("Child");
					this.OnChildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Int NOT NULL")]
		public int Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TicketType_Ticket", Storage="_Ticket", ThisKey="TicketID", OtherKey="TicketID", IsUnique=true, IsForeignKey=false)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketType = null;
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketType = this;
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBook")]
	public partial class UserBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _TicketID;
		
		private EntityRef<Ticket> _Ticket;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    #endregion
		
		public UserBook()
		{
			this._Ticket = default(EntityRef<Ticket>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_UserBook", Storage="_Ticket", ThisKey="TicketID", OtherKey="TicketID", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.UserBooks.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.UserBooks.Add(this);
						this._TicketID = value.TicketID;
					}
					else
					{
						this._TicketID = default(int);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBook", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserBooks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserBooks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Phone;
		
		private System.Nullable<bool> _Permission;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MoviesVote> _MoviesVotes;
		
		private EntitySet<New> _News;
		
		private EntitySet<UserBook> _UserBooks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPermissionChanging(System.Nullable<bool> value);
    partial void OnPermissionChanged();
    #endregion
		
		public User()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MoviesVotes = new EntitySet<MoviesVote>(new Action<MoviesVote>(this.attach_MoviesVotes), new Action<MoviesVote>(this.detach_MoviesVotes));
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			this._UserBooks = new EntitySet<UserBook>(new Action<UserBook>(this.attach_UserBooks), new Action<UserBook>(this.detach_UserBooks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Bit")]
		public System.Nullable<bool> Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MoviesVote", Storage="_MoviesVotes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<MoviesVote> MoviesVotes
		{
			get
			{
				return this._MoviesVotes;
			}
			set
			{
				this._MoviesVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_News", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBook", Storage="_UserBooks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserBook> UserBooks
		{
			get
			{
				return this._UserBooks;
			}
			set
			{
				this._UserBooks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MoviesVotes(MoviesVote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MoviesVotes(MoviesVote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserBooks(UserBook entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserBooks(UserBook entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
